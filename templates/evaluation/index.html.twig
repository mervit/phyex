{% extends 'base.html.twig' %}

{% block title %}Evaluations{% endblock %}

{% block body %}

    {% if exercise %}

    <h1 class="mt-3 h2">{{ 'Evaluation exercise'|trans }} {{ exercise.exerciseType.name }} {{ 'of figurant #'}}{{ exercise.figurant.id}} </h1>
    <div id="evaluation" class="row mt-3">
        <div class="col-12 col-md-9">
            <p>
                {{ exercise.exerciseType.description }}
                <a href="#" data-toggle="modal" data-target="#instructionVideoModal" data-video="{{ '/' ~ relative_uploads_directory ~ 'instruction_videos/' ~ exercise.exerciseType.instructionVideo }}" title="{{ 'play instruction video'|trans }}" data-tooltip>{{ 'Play instruction video'|trans }} &raquo;</a>
            </p>
            <video id="videoFront" class="w-100 video" autoplay loop muted playsinline>
                <source src="{{ '/' ~ relative_uploads_directory ~ 'videos/' ~ exercise.videoFront }}">
            </video>
            <video id="videoSide" class="w-100 video d-none" autoplay loop muted playsinline>
                <source src="{{ '/' ~ relative_uploads_directory ~ 'videos/' ~ exercise.videoSide }}">
            </video>
            <video id="videoMidLeft" class="w-100 video d-none" autoplay loop muted playsinline>
                <source src="{{ '/' ~ relative_uploads_directory ~ 'videos/' ~ exercise.videoMidLeft }}">
            </video>
            <video id="videoMidRight" class="w-100 video d-none" autoplay loop muted playsinline>
                <source src="{{ '/' ~ relative_uploads_directory ~ 'videos/' ~ exercise.videoMidRight }}">
            </video>

            <div class="row">
                <div class="col-12 col-sm-2">
                    <a href="#" class="btn btn-light" id="play"><i class="bi bi-play"></i></a>
                    <span id="position">00:10</span> / <span id="duration">00:25</span>
                </div>
                <div class="col-12 col-sm-10">
                    <input class="form-range" type="range" value="0" id="scrub" max="25">
                </div>
            </div>

        </div>
        <div class="col-12 col-md-3">
            <h2 class="h3">{{ 'Camera views'|trans }}</h2>
            <div class="text-center views mb-3">
                <div class="row mb-2">
                    <div class="col-4"></div>
                    <div class="col-4"><i class="bi bi-universal-access"></i></div>
                    <div class="col-4"><a href="#" id="videoSideButton" onclick="switchVideo('videoSide', this)" class="videoShowButton btn btn-light w-100"><i class="bi bi-arrow-left"></i></a></div>
                </div>
                <div class="row">
                    <div class="col-4"><a href="#" id="videoMidLeftButton" onclick="switchVideo('videoMidLeft', this)" class="videoShowButton btn btn-light w-100"><i class="bi bi-arrow-up-right"></i></a></div>
                    <div class="col-4"><a href="#" id="videoFrontButton" onclick="switchVideo('videoFront', this)" class="videoShowButton btn btn-light w-100 active"><i class="bi bi-arrow-up"></i></a></div>
                    <div class="col-4"><a href="#" id="videoMidRightButton" onclick="switchVideo('videoMidRight', this)" class="videoShowButton btn btn-light w-100"><i class="bi bi-arrow-up-left"></i></a></div>
                </div>
            </div>
            <h2 class="h3">{{ 'Evaluation'|trans }}</h2>
            {{ form_start(evaluationForm) }}
            <div id="evaluationForm">
            {% for child in evaluationForm %}
                {% if child.vars.name starts with 'param' %}
                    <div class="mb-3">
                        {{ form_label(child) }}
                        {{ form_widget(child) }}
                    </div>
                {% endif %}
            {% endfor %}
            </div>
            {{ form_end(evaluationForm) }}
        </div>
    </div>

    <!-- video modal -->
    <div class="modal fade" id="instructionVideoModal" tabindex="-1" aria-labelledby="instructionVideoModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="instructionVideoModalLabel">{{ 'Instruction video'|trans }}</h1>
                    <button type="button" class="btn-close" data-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <video id="modalVideo" class="w-100" controls autoplay>
                        <source src="">
                    </video>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">{{ 'Close'|trans }}</button>
                </div>
            </div>
        </div>
    </div>

    {% else %}
        <div class="alert alert-warning">{{ 'There is no exercises to evaluate!'|trans }}</div>
    {% endif %}
{% endblock %}

{% block javascripts %}

    {{ parent() }}

    <script type="text/javascript">
        var numberOfStars = {{ number_of_stars }};
        var starsText = {};
        {% for i in range(1, number_of_stars) %}{% if (number_of_stars ~ '.' ~ i)|trans({}, 'evaluation_stars') != (number_of_stars ~ '.' ~ i) %}
        starsText[{{ i }}] = '{{ (number_of_stars ~ '.' ~ i)|trans({}, 'evaluation_stars') }}';
        {% endif %}{% endfor %}
    </script>

    {% if exercise %}

    <script type="text/javascript">

        function areAllParametersFilled(){

            const enabledValues = {{ range(1, number_of_stars)|map(i => i ~ '')|json_encode|raw }};

            let params = document.querySelectorAll('[type="text"]');
            for( let i = 0; i < params.length; ++i){
                if(!enabledValues.includes(params[i].value)){
                    return false;
                }
            }
            return true;
        }

        var form = document.getElementsByTagName('form').item(0);
        form.querySelectorAll('[type="submit"]').item(0).setAttribute('disabled', true);
        form.addEventListener('submit', function (e) {
            if(!areAllParametersFilled()){
                e.preventDefault();
            }
        });

    </script>
    <script type="text/javascript">

        function changeStars(el, stars){

            for( i = 1; i <= numberOfStars; ++i)
            {
                let starElement = el.querySelector("[data-star='" + i + "']").getElementsByTagName('i').item(0);
                if( i <= stars) {
                    starElement.setAttribute('class', 'bi bi-star-fill');
                } else {
                    starElement.setAttribute('class', 'bi bi-star');
                }
            }

        }

        function getStarElement(inputIndex, starIndex){
            return document.getElementById('evaluationForm').getElementsByTagName('input').item(inputIndex).parentNode.querySelector("[data-star='" + starIndex + "']");
        }

        var inputForStars = document.getElementById('evaluationForm').getElementsByTagName('input');
        for (let e = 0; e < inputForStars.length; e++) {

            if( inputForStars[e].attributes.type.value != 'text'){
                continue;
            }

            // Create HTML of stars and append it to document
            inputForStars[e].parentNode.innerHTML += '<div class="stars">';
            for ( i = 1; i <= numberOfStars; ++i)
            {
                inputForStars[e].parentNode.innerHTML +=
                    '<a href="#" data-star="' + i + '" class="star" ' +
                    (typeof starsText[i] !== 'undefined' ? ('title="' + starsText[i] + '"') : ('title="' + i + ' star"')) +
                    '><i class="bi bi-star"></i>' +
                    '</a>';
            }
            inputForStars[e].parentNode.innerHTML += '</div>';
            inputForStars[e].classList.add('d-none');

            // Create event trigger for each star
            for ( i = 1; i <= numberOfStars; ++i)
            {
                let starIndex = i;
                let starElement = getStarElement(e, starIndex);
                $(starElement).tooltip();
                starElement.addEventListener('mouseover', function(){
                    changeStars(this.parentNode, starIndex);
                });
                starElement.addEventListener('click', function(e){
                    e.currentTarget.parentNode.getElementsByTagName('input').item(0).value = starIndex;
                    if(areAllParametersFilled()){
                        document.querySelectorAll('[type="submit"]').item(0).removeAttribute('disabled');
                    }
                    e.stopPropagation();
                    e.preventDefault();
                });
                starElement.addEventListener('mouseout', function(e){
                    changeStars(e.currentTarget.parentNode, parseInt(e.currentTarget.parentNode.getElementsByTagName('input').item(0).value));
                });
            }


        }

    </script>
    <script type="text/javascript">

        function switchVideo(videoName, e){

            var videos = document.getElementsByClassName('video');
            for (let i = 0; i < videos.length; i++) {
                videos[i].classList.add('d-none');
            }
            document.getElementById(videoName).classList.remove('d-none');

            var videoShowButtons = document.getElementsByClassName('videoShowButton');
            for (let i = 0; i < videoShowButtons.length; i++) {
                videoShowButtons[i].classList.remove('active');
            }

            e.classList.add('active');

            return false;

        }

        function addEvent(to, type, fn){
            if(document.addEventListener){
                to.addEventListener(type, fn, false);
            } else if(document.attachEvent){
                to.attachEvent('on'+type, fn);
            } else {
                to['on'+type] = fn;
            }
        }

        function asTime(t) {
            t = Math.round(t);
            var s = t % 60;
            var m = Math.round(t / 60);

            return two(m) + ':' + two(s);
        }

        function two(s) {
            s += "";
            if (s.length < 2) s = "0" + s;
            return s;
        }

        function seek() {
            scrub.value = videoSide.currentTime = videoMidLeft.currentTime = videoMidRight.currentTime = this.currentTime;
        }


        var videoFront = document.querySelector('#videoFront'),
            videoSide = document.querySelector('#videoSide'),
            videoMidLeft = document.querySelector('#videoMidLeft'),
            videoMidRight = document.querySelector('#videoMidRight'),

            togglePlay = document.querySelector('#play'),
            position = document.querySelector('#position'),
            ready = false,
            scrub = document.querySelector('#scrub');



        addEvent(togglePlay, 'click', function (e) {
            if (ready) {
                if (videoFront.paused) {
                    if (videoFront.ended) {
                        videoFront.currentTime = 0;
                        videoSide.currentTime = 0;
                        videoMidLeft.currentTime = 0;
                        videoMidRight.currentTime = 0;
                    }
                    videoSide.currentTime = videoFront.currentTime;
                    videoMidLeft.currentTime = videoFront.currentTime;
                    videoMidRight.currentTime = videoFront.currentTime;
                    videoFront.play();
                    this.innerHTML = '<i class="bi bi-pause"></i>';
                } else {
                    videoFront.pause();
                    this.innerHTML = '<i class="bi bi-play"></i>';
                }
            }
            e.stopPropagation();
            e.preventDefault();
        });

        addEvent(videoFront, 'seeking', seek);
        addEvent(videoFront, 'seeked', seek);

        addEvent(videoFront, 'play', function () {
            videoSide.play();
            videoMidLeft.play();
            videoMidRight.play();
        });

        addEvent(videoFront, 'pause', function () {
            videoSide.pause();
            videoMidLeft.pause();
            videoMidRight.pause();
        })

        addEvent(videoFront, 'timeupdate', function () {
            position.innerHTML = asTime(this.currentTime);
            scrub.value = this.currentTime;
        });

        addEvent(videoFront, 'ended', function () {
            //togglePlay.value = "play";
            this.currentTime = 0;
            this.play();
        });

        addEvent(videoFront, 'canplay', function () {
            videoFront.muted = true;
            ready = true;
            document.querySelector('#duration').innerHTML = asTime(this.duration);

            scrub.setAttribute('max', this.duration);
            addEvent(scrub, 'change', function () {
                videoFront.currentTime = this.value;
                videoSide.currentTime = this.value;
                videoMidLeft.currentTime = this.value;
                videoMidRight.currentTime = this.value;
            });
        });
        addEvent(videoFront, 'loadeddata', function () {
            videoFront.play();
            togglePlay.innerHTML = '<i class="bi bi-pause"></i>';
        });

        {% if exercise.exerciseType.defaultVideoView == 'side' %}
            switchVideo('videoSide', document.getElementById('videoSideButton'));
        {% elseif exercise.exerciseType.defaultVideoView == 'midLeft' %}
            switchVideo('videoMidLeft', document.getElementById('videoMidLeftButton'));
        {% elseif exercise.exerciseType.defaultVideoView == 'midRight' %}
            switchVideo('videoMidRight', document.getElementById('videoMidRightButton'));
        {% else %}
            switchVideo('videoFront', document.getElementById('videoFrontButton'));
        {% endif %}

    </script>

    <script type="text/javascript">

        const tooltipTriggerList = document.querySelectorAll('[data-tooltip]')
        const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))

        $('#instructionVideoModal').on('show.bs.modal', function (event) {
            var button = $(event.relatedTarget);
            var video = button.data('video');
            var modal = $(this);
            modal.find('.modal-body source').attr('src', video);
            modal.find('.modal-body video')[0].load();
        });

    </script>

    {% endif %}

{% endblock %}
